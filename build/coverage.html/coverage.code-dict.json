{"/home/travis/build/npmtest/node-npmtest-ember-responsive/test.js":"/* istanbul instrument in package npmtest_ember_responsive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/lib.npmtest_ember_responsive.js":"/* istanbul instrument in package npmtest_ember_responsive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_responsive = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_responsive = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-responsive && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_responsive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_responsive\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_responsive.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_responsive.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_responsive.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_responsive.__dirname + '/lib.npmtest_ember_responsive.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-responsive'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/addon/media.js":"import Ember from 'ember';\nimport nullMatchMedia from './null-match-media';\n\nconst { getOwner } = Ember;\nconst { dasherize, classify } = Ember.String;\n\n/**\n* Handles detecting and responding to media queries.\n*\n* **Adding media query matchers**\n*\n* The first step to using the class is to add media queries that you\n* want it to listen to. Each media query has a name that you can\n* use to reference it by.\n*\n* ```javascript\n* media = Ember.Responsive.Media.create();\n* media.match('mobile', '(max-width: 768px)');\n* media.match('desktop', '(min-width: 769px)');\n* ```\n*\n* **Testing the media query matchers**\n*\n* Now that you've added a few matchers, you can access those media queries as\n* if they were properties on your object. The nice thing is that whenever the\n* media queries change, this class will automatically update the relevant\n* properties (and so will the rest of your application, thanks to the power\n* of two-way data-binding).\n*\n* ```javascript\n* media = Ember.Responsive.Media.create();\n* media.match('mobile', '(max-width: 768px)');\n* media.match('desktop', '(min-width: 769px)');\n*\n* // There are convenient \"isser\" properties defined...\n* if (media.get('isMobile')) {\n*   console.log('mobile!');\n* }\n*\n* // As well as access to the matchMedia API...\n* if (media.get('desktop.matches')) {\n*   console.log('desktop!');\n* }\n* ```\n*\n* **Retrieving a list of matching media queries**\n*\n* It's also nice to be able to see which media queries are matching, since\n* some applications might have many matches at the same time.\n*\n* ```javascript\n* media = Ember.Responsive.Media.create();\n* media.match('desktop', 'all');\n* media.match('mobile', 'all');\n*\n* console.log(media.get('matches'));\n* // => Ember.Set(['desktop', 'mobile']);\n* ```\n*\n* This class can also return that list as a string of dasherized class names,\n* which is useful for placing on your app's rootElement. By default, these\n* class names are prefixed with `media-`, so as not to clash with any other\n* classes your app might use.\n*\n* ```javascript\n* App.ApplicationView = Ember.View.extend({\n*   classNameBindings: ['media.classNames']\n* });\n* ```\n*\n* @module    ember-responsive\n* @namespace Ember.Responsive\n* @class     Media\n* @extends   Ember.Object\n*/\nexport default Ember.Service.extend({\n\n  /**\n  * A set of matching matchers.\n  *\n  * @property  matches\n  * @type      Ember.NativeArray\n  * @default   Ember.NativeArray\n  */\n  matches: Ember.computed(function() {\n    return Ember.A();\n  }),\n\n  /**\n    * A hash of listeners indexed by their matcher's names\n    *\n    * @property\n    * @type Object\n    */\n  listeners: {},\n\n  /**\n  * The matcher to use for testing media queries.\n  *\n  * @property  matcher\n  * @type      matchMedia\n  * @default   window.matchMedia\n  * @private\n  */\n  mql: detectMatchMedia(),\n\n  /**\n   * Initialize the service based on the breakpoints config\n   *\n   * @method init\n   *\n   */\n  init() {\n    const owner = getOwner(this);\n    owner.registerOptionsForType('breakpoints', { instantiate: false });\n    const breakpoints = this.get('breakpoints');\n    if (breakpoints) {\n      for (var name in breakpoints) {\n        if (breakpoints.hasOwnProperty(name)) {\n          this.match(name, breakpoints[name]);\n        }\n      }\n    }\n  },\n\n  breakpoints: Ember.computed(function() {\n    return getOwner(this).lookup('breakpoints:main');\n  }),\n\n  /**\n  * A string composed of all the matching matchers' names, turned into\n  * friendly, dasherized class-names that are prefixed with `media-`.\n  *\n  * @property  classNames\n  * @type      string\n  */\n  classNames: Ember.computed('matches.[]', function() {\n    return this.get('matches').map(function(name) {\n      return `media-${dasherize(name)}`;\n    }).join(' ');\n  }),\n\n  /**\n  * Adds a new matcher to the list.\n  *\n  * After this method is called, you will be able to access the result\n  * of the matcher as a property on this object.\n  *\n  * **Adding a new matcher**\n  *\n  * ```javascript\n  * media = Ember.Responsive.Media.create();\n  * media.match('all', 'all');\n  * media.get('all');\n  *   // => instanceof window.matchMedia\n  * media.get('all.matches');\n  *   // => true\n  * ```\n  *\n  * @param   string  name   The name of the matcher\n  * @param   string  query  The media query to match against\n  * @method  match\n  */\n  match(name, query) {\n    var matcher = (this.get('mql') || window.matchMedia)(query),\n        isser = 'is' + classify(name);\n\n    var listener = (matcher) => {\n      if (this.get('isDestroyed')) {\n        return;\n      }\n\n      this.set(name, matcher);\n      this.set(isser, matcher.matches);\n\n      if (matcher.matches) {\n        this.get('matches').addObject(name);\n      } else {\n        this.get('matches').removeObject(name);\n      }\n    };\n    this.get('listeners')[name] = listener;\n\n    if (matcher.addListener) {\n      matcher.addListener(function(matcher){\n        Ember.run(null, listener, matcher);\n      });\n    }\n    listener(matcher);\n  }\n});\n\nfunction detectMatchMedia() {\n  if (typeof window === 'object' && window.matchMedia) {\n    return window.matchMedia;\n  }\n\n  return nullMatchMedia;\n}\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/addon/null-match-media.js":"/**\n * Stub function that is `matchMedia` API compatible but always returns\n * `false`. Useful for server-side environments like FastBoot where there\n * is no viewport.\n */\nexport default function() {\n  return {\n    matches: false\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/app/breakpoints.js":"export default {\n  mobile:  '(max-width: 768px)',\n  tablet:  '(min-width: 769px) and (max-width: 992px)',\n  desktop: '(min-width: 993px) and (max-width: 1200px)',\n  jumbo:   '(min-width: 1201px)'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/config/ember-try.js":"module.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release'\n      },\n      resolutions: {\n        'ember': 'release'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        'ember': 'components/ember#canary'\n      },\n      resolutions: {\n        'ember': 'canary'\n      }\n    },\n    {\n      name: 'ember-1.13',\n      dependencies: {\n        'ember': 'components/ember#1.13.13'\n      },\n      resolutions: {\n        'ember': '1.13.13'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/addon/initializers/responsive.js":"/**\n * Ember responsive initializer\n *\n * Supports auto injecting media service app-wide.\n * Generated by the ember-responsive addon.\n */\nexport function initialize() {\n  const application = arguments[1] || arguments[0];\n\n  application.inject('controller', 'media', 'service:media');\n  application.inject('component', 'media', 'service:media');\n  application.inject('route', 'media', 'service:media');\n  application.inject('view', 'media', 'service:media');\n}\n\nexport default {\n  name: 'responsive',\n  initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-responsive/node_modules/ember-responsive/app/services/media.js":"import Media from 'ember-responsive/media';\nexport default Media;\n"}